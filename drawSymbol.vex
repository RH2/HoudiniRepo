void drawSymbol(vector v_P;string symbol;int decoration;float scale;vector color){

    //vector color = {2,0.5,0.2};
    //printf("v_P:%f,symbol:%f",v_P,symbol);
    vector v0  = {0,0,0};
    vector v0b = {0.5,0,0};
    vector v1  = {1,0,0};
    vector v2  = {0,0,1};
    vector v2b = {0.5,0,1};
    vector v3  = {1,0,1};
    vector v4  = {0,0,2};
    vector v4b = {0.5,0,2};
    vector v5  = {1,0,2};
    vector v0u = {0.5,0,0.5};
    vector lr0 = {0.8,0,0};
    vector lr1 = {0.8,0,0.2};
    vector lr2 = {1,0,0.2};

        vector u0  = {0,0,-0.3};
        vector u1  = {1,0,-0.3};
        vector b0  = {-0.3,0,-0.3};
        vector b1  = {1.3,0,-0.3};
        vector b2  = {-0.3,0,2.3};
        vector b3  = {1.3,0,2.3};
        vector h2  = {-0.3,0,2.3};
        vector h2b = {0.5,0,2.9};
        vector h3  = {1.3,0,2.3};
        vector vup = {0.75,0,1.2};
        vector vdown = {0.75,0,0.8};

        v0  = v0  *scale;
        v0b = v0b *scale;
        v1  = v1  *scale;
        v2  = v2  *scale;
        v2b = v2b *scale;
        v3  = v3  *scale;
        v4  = v4  *scale;
        v4b = v4b *scale;
        v5  = v5  *scale;
        u0  = u0  *scale;
        u1  = u1  *scale;
        b0  = b0  *scale;
        b1  = b1  *scale;
        b2  = b2  *scale;
        b3  = b3  *scale;
        h2  = h2  *scale;
        h2b = h2b *scale;
        h3  = h3  *scale;
        lr0  = lr0  *scale;
        lr1  = lr1  *scale;
        lr2  = lr2  *scale;
        v0u  = v0u  *scale;
        vup = vup *scale;
        vdown = vdown *scale;

        v0  = v0  + v_P;
        v0b = v0b + v_P;
        v1  = v1  + v_P;
        v2  = v2  + v_P;
        v2b = v2b + v_P;
        v3  = v3  + v_P;
        v4  = v4  + v_P;
        v4b = v4b + v_P;
        v5  = v5  + v_P;
        u0  = u0  + v_P;
        u1  = u1  + v_P;
        b0  = b0  + v_P;
        b1  = b1  + v_P;
        b2  = b2  + v_P;
        b3  = b3  + v_P;
        h2  = h2  + v_P;
        h2b = h2b + v_P;
        h3  = h3  + v_P;
        lr0  = lr0+ v_P;
        lr1  = lr1+ v_P;
        lr2  = lr2+ v_P;
        v0u  = v0u  + v_P;
        vup = vup + v_P;
        vdown = vdown + v_P;


    if(symbol=="0"){
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p0);
        int vert2 = addvertex(0,poly,p1);
        int vert3 = addvertex(0,poly,p3);
        int vert4 = addvertex(0,poly,p5);
        int vert5 = addvertex(0,poly,p4);
        int vert6 = addvertex(0,poly,p2);
        int vert7 = addvertex(0,poly,p0);

    }
    else if(symbol=="1"){
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v1);
        int p1 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");

        int vert1 = addvertex(0,poly,p0);
        int vert2 = addvertex(0,poly,p1);
    }
    else if(symbol=="2"){
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert0 = addvertex(0,poly,p4);
        int vert1 = addvertex(0,poly,p5);
        int vert2 = addvertex(0,poly,p3);
        int vert3 = addvertex(0,poly,p2);
        int vert4 = addvertex(0,poly,p0);
        int vert5 = addvertex(0,poly,p1);
    }
    else if(symbol=="3"){
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p4);
        int vert2 = addvertex(0,poly,p5);
        int vert3 = addvertex(0,poly,p3);
        int vert4 = addvertex(0,poly,p2);
        int vert5 = addvertex(0,poly,p3);
        int vert6 = addvertex(0,poly,p1);
        int vert7 = addvertex(0,poly,p0);
    }
    else if(symbol=="4"){
        int poly = addprim(0,"polyline");
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p1);
        int vert2 = addvertex(0,poly,p3);
        int vert3 = addvertex(0,poly,p5);
        int vert4 = addvertex(0,poly,p2);
        int vert5 = addvertex(0,poly,p3);
    }
    else if(symbol=="5"){
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p5);
        int vert2 = addvertex(0,poly,p4);
        int vert3 = addvertex(0,poly,p2);
        int vert4 = addvertex(0,poly,p3);
        int vert5 = addvertex(0,poly,p1);
        int vert6 = addvertex(0,poly,p0);
    }
    else if(symbol=="6"){
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p5);
        int vert2 = addvertex(0,poly,p4);
        int vert3 = addvertex(0,poly,p2);
        int vert4 = addvertex(0,poly,p0);
        int vert5 = addvertex(0,poly,p1);
        int vert6 = addvertex(0,poly,p3);
        int vert7 = addvertex(0,poly,p2);
    }
    else if(symbol=="7"){
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p2b = addpoint(0,v2b);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p2b, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p4);
        int vert2 = addvertex(0,poly,p5);
        int vert3 = addvertex(0,poly,p2b);
        int vert4 = addvertex(0,poly,p0);
        int poly2 = addprim(0,"polyline");
        vert3 = addvertex(0,poly2,p2);
        vert4 = addvertex(0,poly2,p3);
    }
    else if(symbol=="8"){
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p0);
        int vert2 = addvertex(0,poly,p1);
        int vert3 = addvertex(0,poly,p3);
        int vert4 = addvertex(0,poly,p5);
        int vert5 = addvertex(0,poly,p4);
        int vert6 = addvertex(0,poly,p2);
        int vert7 = addvertex(0,poly,p0);
        int poly2 = addprim(0,"polyline");
        vert3 = addvertex(0,poly2,p2);
        vert4 = addvertex(0,poly2,p3);
    }
    else if(symbol=="9"){
        int poly = addprim(0,"polyline");
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p1);
        int vert2 = addvertex(0,poly,p3);
        int vert3 = addvertex(0,poly,p5);
        int vert4 = addvertex(0,poly,p4);
        int vert5 = addvertex(0,poly,p2);
        int vert6 = addvertex(0,poly,p3);
    }
    else if(symbol=="A"){//A
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2b = addpoint(0,v2b);
        int p3 = addpoint(0,v3);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2b, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p0);
        int vert2 = addvertex(0,poly,p2b);
        int vert3 = addvertex(0,poly,p5);
        int vert4 = addvertex(0,poly,p3);
        int vert5 = addvertex(0,poly,p1);
        int poly2 = addprim(0,"polyline");
        vert3 = addvertex(0,poly2,p2b);
        vert4 = addvertex(0,poly2,p3);
    }
    else if(symbol=="B"){//B
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p2);
        int vert2 = addvertex(0,poly,p4);
        int vert3 = addvertex(0,poly,p5);
        int vert4 = addvertex(0,poly,p2);
        int vert5 = addvertex(0,poly,p1);
        int vert6 = addvertex(0,poly,p0);
        int vert7 = addvertex(0,poly,p2);
    }
    else if(symbol=="C"){//C
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p5);
        int vert2 = addvertex(0,poly,p4);
        int vert3 = addvertex(0,poly,p2);
        int vert4 = addvertex(0,poly,p0);
        int vert5 = addvertex(0,poly,p1);
    }
    else if(symbol=="D"){//D
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");

        int vert1 = addvertex(0,poly,p4);
        int vert2 = addvertex(0,poly,p3);
        int vert3 = addvertex(0,poly,p0);
        int vert4 = addvertex(0,poly,p2);
        int vert5 = addvertex(0,poly,p4);
    }
    else if(symbol=="E"){//E
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p5);
        int vert2 = addvertex(0,poly,p4);
        int vert3 = addvertex(0,poly,p2);
        int vert4 = addvertex(0,poly,p3);
        int vert5 = addvertex(0,poly,p2);
        int vert6 = addvertex(0,poly,p0);
        int vert7 = addvertex(0,poly,p1);
    }
    else if(symbol=="F"){//F
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p5);
        int vert2 = addvertex(0,poly,p4);
        int vert3 = addvertex(0,poly,p2);
        int vert4 = addvertex(0,poly,p3);
        int vert5 = addvertex(0,poly,p2);
        int vert6 = addvertex(0,poly,p0);
    }
    else if(symbol=="X"){//X
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2b = addpoint(0,v2b);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2b, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int poly = addprim(0,"polyline");
        int vert1 = addvertex(0,poly,p0);
        int vert2 = addvertex(0,poly,p2b);
        int vert3 = addvertex(0,poly,p1);
        int poly2 = addprim(0,"polyline");
        int vert4 = addvertex(0,poly2,p4);
        int vert5 = addvertex(0,poly2,p2b);
        int vert6 = addvertex(0,poly2,p5);
    }
    else if(symbol=="."){//X
        int p0 = addpoint(0,lr0);
        int p1 = addpoint(0,lr1);
        int p2 = addpoint(0,lr2);
        int p3 = addpoint(0,v1);


        int pass = setpointattrib(0, "Cd", p0, color, "set");
            pass = setpointattrib(0, "Cd", p1, color, "set");
            pass = setpointattrib(0, "Cd", p2, color, "set");
            pass = setpointattrib(0, "Cd", p3, color, "set");

        int poly = addprim(0,"polyline");
        int vert1 = addvertex(0,poly,p0);
        int vert2 = addvertex(0,poly,p1);
        int vert3 = addvertex(0,poly,p2);
        int vert4 = addvertex(0,poly,p3);
        int vert5 = addvertex(0,poly,p0);
    }
    else if(symbol=="-"){//X
        int p0 = addpoint(0,v2);
        int p1 = addpoint(0,v3);


        int pass = setpointattrib(0, "Cd", p0, color, "set");
            pass = setpointattrib(0, "Cd", p1, color, "set");

        int poly = addprim(0,"polyline");
        int vert1 = addvertex(0,poly,p0);
        int vert2 = addvertex(0,poly,p1);
    }    
    else if(symbol=="Y"){//Y
        int p0b = addpoint(0,v0b);
        int p2b = addpoint(0,v2b);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);
        
        int pass = setpointattrib(0, "Cd", p0b, color, "set");
                pass = setpointattrib(0, "Cd", p2b, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int poly = addprim(0,"polyline");
        int vert1 = addvertex(0,poly,p0b);
        int vert2 = addvertex(0,poly,p2b);
        int vert3 = addvertex(0,poly,p4);
        int vert4 = addvertex(0,poly,p2b);
        int vert5 = addvertex(0,poly,p5);
    }
    else if(symbol=="Z"){//Z
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2b = addpoint(0,v2b);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2b, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int poly = addprim(0,"polyline");
        int vert1 = addvertex(0,poly,p4);
        int vert2 = addvertex(0,poly,p5);
        int vert3 = addvertex(0,poly,p2b);
        int vert4 = addvertex(0,poly,p0);
        int vert5 = addvertex(0,poly,p1);
    }
    else if(symbol=="V"){//V
        int p0b = addpoint(0,v0b);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0b, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int poly = addprim(0,"polyline");
        int vert1 = addvertex(0,poly,p4);
        int vert2 = addvertex(0,poly,p0b);
        int vert3 = addvertex(0,poly,p5);
    }
    else if(symbol=="x"){//x
        int p0 = addpoint(0,v0);
        int p0u = addpoint(0,v0u);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        
        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p0u, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");

        int poly = addprim(0,"polyline");
        int vert1 = addvertex(0,poly,p0);
        int vert2 = addvertex(0,poly,p0u);
        int vert3 = addvertex(0,poly,p1);
        int poly2 = addprim(0,"polyline");
        int vert4 = addvertex(0,poly2,p2);
        int vert5 = addvertex(0,poly2,p0u);
        int vert6 = addvertex(0,poly2,p3);      
    }
    else if(symbol==">"){//->
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int pup = addpoint(0,vup);
        int pdown = addpoint(0,vdown);

        int pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", pup, color, "set");
                pass = setpointattrib(0, "Cd", pdown, color, "set");

        int poly = addprim(0,"polyline");
        int vert1 = addvertex(0,poly,p2);
        int vert2 = addvertex(0,poly,p3);
        int vert3 = addvertex(0,poly,pup);
        int poly2 = addprim(0,"polyline");
        int vert5 = addvertex(0,poly2,p3);
        int vert6 = addvertex(0,poly2,pdown);  
    }

    if(decoration == 1){//underline
        int d = addprim(0,"polyline");
        int p0 = addpoint(0,u0);
        int p1 = addpoint(0,u1);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");

        int vert0 = addvertex(0,d,p0);
        int vert1 = addvertex(0,d,p1);
    }
    if(decoration == 2){//box
        int d = addprim(0,"polyline");
        int p0 = addpoint(0,b0);
        int p1 = addpoint(0,b1);
        int p2 = addpoint(0,b2);
        int p3 = addpoint(0,b3);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");

        int vert0 = addvertex(0,d,p0);
        int vert1 = addvertex(0,d,p1);
        int vert2 = addvertex(0,d,p3);
        int vert3 = addvertex(0,d,p2);
        int vert4 = addvertex(0,d,p0);
    }
    if(decoration == 3){//hat
        int d = addprim(0,"polyline");
        int p0 = addpoint(0,h2);
        int p1 = addpoint(0,h2b);
        int p2 = addpoint(0,h3);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");

        int vert0 = addvertex(0,d,p0);
        int vert1 = addvertex(0,d,p1);
        int vert2 = addvertex(0,d,p2);
    }
}
void drawNumber(vector position;string inputSTRING;float scale;vector color){
        //string n = itoa(number);
        //printf("n:%s",number);
        for(int i = 0;i<len(inputSTRING);i++){
                string char = inputSTRING[i];
                vector positionVector = set(i*1.5*scale,0,0);
                drawSymbol(position+positionVector,char,0,scale,color);
        }
}
void drawLine(vector a; vector b; float scale; vector color){
    int poly = addprim(0,"polyline");
    int p0 = addpoint(0,a);
    int p1 = addpoint(0,b);
    int pass = setpointattrib(0, "Cd", p0, color, "set");
     pass = setpointattrib(0, "Cd", p1, color, "set");
    int v0 = addvertex(0,poly,p0);
    int v1 = addvertex(0,poly,p1);
    vector mid = (a+b)/2;
    float length = length(a-b);
    //draw tip
    int tip = addprim(0,"polyline");
    float dx = a[0]-b[0];
    float dy = a[2]-b[2];
    float angle = atan2(dx,dy);
    matrix3 m = ident();
    rotate ( m, angle+3.1415, { 0, 1, 0 } );
    vector arrowL={-1.5,0,-1.5}*scale;
    vector arrowR={1.5,0,-1.5}*scale;
    arrowL*=m;
    arrowR*=m;
    arrowL+=b;
    arrowR+=b;
    int p2 = addpoint(0,arrowL);
    int p3 = addpoint(0,arrowR);
    int v2 = addvertex(0,tip,p2);
    int v2b = addvertex(0,tip,p1);
    int v3 = addvertex(0,tip,p3);



    //vector pl = set(;
    //vector pr = sin()+b;
    drawNumber(mid+{0,0,0}, sprintf("%g",length),scale,color);
}
drawLine({0,0,0},{1,1,0},0.02,{1,0,1});
drawLine({0,0,0},{2,1,5},0.02,{1,0,1});
drawLine({0,0,0},{10,1,3},0.02,{1,0,1});
drawLine({0,0,0},{0.5,0,2},0.02, {0.5,0,2});
drawLine({0,0,0},{0.4,0,3},0.02, {0.4,0,3});
drawLine({0,0,0},{0.6,0,3.1},0.02,{0.6,0,3.1});


float toDEG(float radians){
    return(180*(radians/3.14159265));
}
//GET next vertex sharing the same point
//int  vertexnext(<geometry>geometry, int linearvertex)   //returns -1 if there are no more vertices at this point.

//Algorithm: start at a vertex, create array of all later verts, get their halfedges, get the src. and dst. of all these edges. 
//compare the edge angles, if the angle is in a range, continue along to that edge, REASON: don't go upstream.


//(start at curve endpoints) --create array of points that have 1 neighbor.
int zeropoints[];
for(int ns=0;ns<npoints(0);ns++){
    if(neighbourcount(0,ns)==1){
        push(zeropoints,ns);
    }
}
int dirtypoints[]; //points that are part of a flow already.
int mergepoints[]; //datastructure: [even(terminal),odd(merge)]
//grow curve from each zero point, storing terminal point.
for(int zp=0;zp<1;zp++){
//for(int zp=0;zp<len(zeropoints);zp++){
    //extract this angle.
    int starthedge = pointhedge(0,zeropoints[zp]);
    int src = hedge_srcpoint(0,starthedge);
    int dst = hedge_dstpoint(0,starthedge);
    int dstV = hedge_dstvertex(0,starthedge);   
    vector srcP = point(0,"P",src);
    vector dstP = point(0,"P",dst);
    float dx = srcP[0]-dstP[0];
    float dy = srcP[2]-dstP[2];
    vector meanP = (srcP+dstP)/2;
    float angle = atan2(dy,dx);//y,x range -pi > pi
    float angleD = toDEG(angle);


    drawNumber(srcP+{0.01,0,0},itoa(zp)+">",0.05,hsvtorgb((zp/(len(zeropoints)+.01)),1,0.8)); 
    drawNumber(srcP+{0.08,0,-0.025},sprintf("%f",angleD),0.01,hsvtorgb(.02,1,2)); 
    
    //create an array of next edges.
    int possibleEdges[]=neighbours(0,dst);
    float angles[];
    //for each edge, calculate and draw debug info.
    for(int pe=0;pe<len(possibleEdges);pe++){
        if(possibleEdges[pe]==dst){break;}
        vector otherPointP = point(0,"P",possibleEdges[pe]);
        dx = dstP[0]-otherPointP[0];
        dy = dstP[2]-otherPointP[2];
        meanP = (otherPointP+dstP)/2;
        angle = atan2(dy,dx);//y,x range -pi > pi
        angleD = toDEG(angle);

        drawNumber(otherPointP+{0.01,.1,0},itoa(zp)+".1 ",0.05,hsvtorgb(.0,0.8,0.1)); 
        drawNumber(otherPointP+{0.08,.1,-0.025},sprintf("%f",angleD),0.01,hsvtorgb(.0,1,2)); 
    }


//angle = Pi - abs(abs(a1 - a2) - Pi);

}
    //int postVertex =  hedge_postdstvertex(0, int hedge)  //next vertex after destination.
    //int  vertexnext(<geometry>geometry, int linearvertex)       //next vertext on vertex
    //int  pointedge(<geometry>geometry, int point1, int point2)  //hedge between
    //int  pointhedge(<geometry>geometry, int point)              //hedge with source point
    //int  vertexhedge(<geometry>geometry, int vertex)            //hedge with source vertex! 