void drawSymbol(vector v_P;string symbol;int decoration;float scale;vector color){

    //vector color = {2,0.5,0.2};
    //printf("v_P:%f,symbol:%f",v_P,symbol);
    vector v0  = {0,0,0};
    vector v0b = {0.5,0,0};
    vector v1  = {1,0,0};
    vector v2  = {0,0,1};
    vector v2b = {0.5,0,1};
    vector v3  = {1,0,1};
    vector v4  = {0,0,2};
    vector v4b = {0.5,0,2};
    vector v5  = {1,0,2};
    vector v0u = {0.5,0,0.5};
    vector lr0 = {0.8,0,0};
    vector lr1 = {0.8,0,0.2};
    vector lr2 = {1,0,0.2};

        vector u0  = {0,0,-0.3};
        vector u1  = {1,0,-0.3};
        vector b0  = {-0.3,0,-0.3};
        vector b1  = {1.3,0,-0.3};
        vector b2  = {-0.3,0,2.3};
        vector b3  = {1.3,0,2.3};
        vector h2  = {-0.3,0,2.3};
        vector h2b = {0.5,0,2.9};
        vector h3  = {1.3,0,2.3};
        vector vup = {0.75,0,1.2};
        vector vdown = {0.75,0,0.8};

        v0  = v0  *scale;
        v0b = v0b *scale;
        v1  = v1  *scale;
        v2  = v2  *scale;
        v2b = v2b *scale;
        v3  = v3  *scale;
        v4  = v4  *scale;
        v4b = v4b *scale;
        v5  = v5  *scale;
        u0  = u0  *scale;
        u1  = u1  *scale;
        b0  = b0  *scale;
        b1  = b1  *scale;
        b2  = b2  *scale;
        b3  = b3  *scale;
        h2  = h2  *scale;
        h2b = h2b *scale;
        h3  = h3  *scale;
        lr0  = lr0  *scale;
        lr1  = lr1  *scale;
        lr2  = lr2  *scale;
        v0u  = v0u  *scale;
        vup = vup *scale;
        vdown = vdown *scale;

        v0  = v0  + v_P;
        v0b = v0b + v_P;
        v1  = v1  + v_P;
        v2  = v2  + v_P;
        v2b = v2b + v_P;
        v3  = v3  + v_P;
        v4  = v4  + v_P;
        v4b = v4b + v_P;
        v5  = v5  + v_P;
        u0  = u0  + v_P;
        u1  = u1  + v_P;
        b0  = b0  + v_P;
        b1  = b1  + v_P;
        b2  = b2  + v_P;
        b3  = b3  + v_P;
        h2  = h2  + v_P;
        h2b = h2b + v_P;
        h3  = h3  + v_P;
        lr0  = lr0+ v_P;
        lr1  = lr1+ v_P;
        lr2  = lr2+ v_P;
        v0u  = v0u  + v_P;
        vup = vup + v_P;
        vdown = vdown + v_P;


    if(symbol=="0"){
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p0);
        int vert2 = addvertex(0,poly,p1);
        int vert3 = addvertex(0,poly,p3);
        int vert4 = addvertex(0,poly,p5);
        int vert5 = addvertex(0,poly,p4);
        int vert6 = addvertex(0,poly,p2);
        int vert7 = addvertex(0,poly,p0);

    }
    else if(symbol=="1"){
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v1);
        int p1 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");

        int vert1 = addvertex(0,poly,p0);
        int vert2 = addvertex(0,poly,p1);
    }
    else if(symbol=="2"){
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert0 = addvertex(0,poly,p4);
        int vert1 = addvertex(0,poly,p5);
        int vert2 = addvertex(0,poly,p3);
        int vert3 = addvertex(0,poly,p2);
        int vert4 = addvertex(0,poly,p0);
        int vert5 = addvertex(0,poly,p1);
    }
    else if(symbol=="3"){
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p4);
        int vert2 = addvertex(0,poly,p5);
        int vert3 = addvertex(0,poly,p3);
        int vert4 = addvertex(0,poly,p2);
        int vert5 = addvertex(0,poly,p3);
        int vert6 = addvertex(0,poly,p1);
        int vert7 = addvertex(0,poly,p0);
    }
    else if(symbol=="4"){
        int poly = addprim(0,"polyline");
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p1);
        int vert2 = addvertex(0,poly,p3);
        int vert3 = addvertex(0,poly,p5);
        int vert4 = addvertex(0,poly,p2);
        int vert5 = addvertex(0,poly,p3);
    }
    else if(symbol=="5"){
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p5);
        int vert2 = addvertex(0,poly,p4);
        int vert3 = addvertex(0,poly,p2);
        int vert4 = addvertex(0,poly,p3);
        int vert5 = addvertex(0,poly,p1);
        int vert6 = addvertex(0,poly,p0);
    }
    else if(symbol=="6"){
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p5);
        int vert2 = addvertex(0,poly,p4);
        int vert3 = addvertex(0,poly,p2);
        int vert4 = addvertex(0,poly,p0);
        int vert5 = addvertex(0,poly,p1);
        int vert6 = addvertex(0,poly,p3);
        int vert7 = addvertex(0,poly,p2);
    }
    else if(symbol=="7"){
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p2b = addpoint(0,v2b);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p2b, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p4);
        int vert2 = addvertex(0,poly,p5);
        int vert3 = addvertex(0,poly,p2b);
        int vert4 = addvertex(0,poly,p0);
        int poly2 = addprim(0,"polyline");
        vert3 = addvertex(0,poly2,p2);
        vert4 = addvertex(0,poly2,p3);
    }
    else if(symbol=="8"){
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p0);
        int vert2 = addvertex(0,poly,p1);
        int vert3 = addvertex(0,poly,p3);
        int vert4 = addvertex(0,poly,p5);
        int vert5 = addvertex(0,poly,p4);
        int vert6 = addvertex(0,poly,p2);
        int vert7 = addvertex(0,poly,p0);
        int poly2 = addprim(0,"polyline");
        vert3 = addvertex(0,poly2,p2);
        vert4 = addvertex(0,poly2,p3);
    }
    else if(symbol=="9"){
        int poly = addprim(0,"polyline");
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p1);
        int vert2 = addvertex(0,poly,p3);
        int vert3 = addvertex(0,poly,p5);
        int vert4 = addvertex(0,poly,p4);
        int vert5 = addvertex(0,poly,p2);
        int vert6 = addvertex(0,poly,p3);
    }
    else if(symbol=="A"){//A
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2b = addpoint(0,v2b);
        int p3 = addpoint(0,v3);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2b, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p0);
        int vert2 = addvertex(0,poly,p2b);
        int vert3 = addvertex(0,poly,p5);
        int vert4 = addvertex(0,poly,p3);
        int vert5 = addvertex(0,poly,p1);
        int poly2 = addprim(0,"polyline");
        vert3 = addvertex(0,poly2,p2b);
        vert4 = addvertex(0,poly2,p3);
    }
    else if(symbol=="B"){//B
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p2);
        int vert2 = addvertex(0,poly,p4);
        int vert3 = addvertex(0,poly,p5);
        int vert4 = addvertex(0,poly,p2);
        int vert5 = addvertex(0,poly,p1);
        int vert6 = addvertex(0,poly,p0);
        int vert7 = addvertex(0,poly,p2);
    }
    else if(symbol=="C"){//C
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p5);
        int vert2 = addvertex(0,poly,p4);
        int vert3 = addvertex(0,poly,p2);
        int vert4 = addvertex(0,poly,p0);
        int vert5 = addvertex(0,poly,p1);
    }
    else if(symbol=="D"){//D
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");

        int vert1 = addvertex(0,poly,p4);
        int vert2 = addvertex(0,poly,p3);
        int vert3 = addvertex(0,poly,p0);
        int vert4 = addvertex(0,poly,p2);
        int vert5 = addvertex(0,poly,p4);
    }
    else if(symbol=="E"){//E
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p5);
        int vert2 = addvertex(0,poly,p4);
        int vert3 = addvertex(0,poly,p2);
        int vert4 = addvertex(0,poly,p3);
        int vert5 = addvertex(0,poly,p2);
        int vert6 = addvertex(0,poly,p0);
        int vert7 = addvertex(0,poly,p1);
    }
    else if(symbol=="F"){//F
        int poly = addprim(0,"polyline");
        int p0 = addpoint(0,v0);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int vert1 = addvertex(0,poly,p5);
        int vert2 = addvertex(0,poly,p4);
        int vert3 = addvertex(0,poly,p2);
        int vert4 = addvertex(0,poly,p3);
        int vert5 = addvertex(0,poly,p2);
        int vert6 = addvertex(0,poly,p0);
    }
    else if(symbol=="X"){//X
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2b = addpoint(0,v2b);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2b, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int poly = addprim(0,"polyline");
        int vert1 = addvertex(0,poly,p0);
        int vert2 = addvertex(0,poly,p2b);
        int vert3 = addvertex(0,poly,p1);
        int poly2 = addprim(0,"polyline");
        int vert4 = addvertex(0,poly2,p4);
        int vert5 = addvertex(0,poly2,p2b);
        int vert6 = addvertex(0,poly2,p5);
    }
    else if(symbol=="."){//X
        int p0 = addpoint(0,lr0);
        int p1 = addpoint(0,lr1);
        int p2 = addpoint(0,lr2);
        int p3 = addpoint(0,v1);


        int pass = setpointattrib(0, "Cd", p0, color, "set");
            pass = setpointattrib(0, "Cd", p1, color, "set");
            pass = setpointattrib(0, "Cd", p2, color, "set");
            pass = setpointattrib(0, "Cd", p3, color, "set");

        int poly = addprim(0,"polyline");
        int vert1 = addvertex(0,poly,p0);
        int vert2 = addvertex(0,poly,p1);
        int vert3 = addvertex(0,poly,p2);
        int vert4 = addvertex(0,poly,p3);
        int vert5 = addvertex(0,poly,p0);
    }
    else if(symbol=="-"){//X
        int p0 = addpoint(0,v2);
        int p1 = addpoint(0,v3);


        int pass = setpointattrib(0, "Cd", p0, color, "set");
            pass = setpointattrib(0, "Cd", p1, color, "set");

        int poly = addprim(0,"polyline");
        int vert1 = addvertex(0,poly,p0);
        int vert2 = addvertex(0,poly,p1);
    }    
    else if(symbol=="Y"){//Y
        int p0b = addpoint(0,v0b);
        int p2b = addpoint(0,v2b);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);
        
        int pass = setpointattrib(0, "Cd", p0b, color, "set");
                pass = setpointattrib(0, "Cd", p2b, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int poly = addprim(0,"polyline");
        int vert1 = addvertex(0,poly,p0b);
        int vert2 = addvertex(0,poly,p2b);
        int vert3 = addvertex(0,poly,p4);
        int vert4 = addvertex(0,poly,p2b);
        int vert5 = addvertex(0,poly,p5);
    }
    else if(symbol=="Z"){//Z
        int p0 = addpoint(0,v0);
        int p1 = addpoint(0,v1);
        int p2b = addpoint(0,v2b);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2b, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int poly = addprim(0,"polyline");
        int vert1 = addvertex(0,poly,p4);
        int vert2 = addvertex(0,poly,p5);
        int vert3 = addvertex(0,poly,p2b);
        int vert4 = addvertex(0,poly,p0);
        int vert5 = addvertex(0,poly,p1);
    }
    else if(symbol=="V"){//V
        int p0b = addpoint(0,v0b);
        int p4 = addpoint(0,v4);
        int p5 = addpoint(0,v5);

        int pass = setpointattrib(0, "Cd", p0b, color, "set");
                pass = setpointattrib(0, "Cd", p4, color, "set");
                pass = setpointattrib(0, "Cd", p5, color, "set");

        int poly = addprim(0,"polyline");
        int vert1 = addvertex(0,poly,p4);
        int vert2 = addvertex(0,poly,p0b);
        int vert3 = addvertex(0,poly,p5);
    }
    else if(symbol=="x"){//x
        int p0 = addpoint(0,v0);
        int p0u = addpoint(0,v0u);
        int p1 = addpoint(0,v1);
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        
        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p0u, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");

        int poly = addprim(0,"polyline");
        int vert1 = addvertex(0,poly,p0);
        int vert2 = addvertex(0,poly,p0u);
        int vert3 = addvertex(0,poly,p1);
        int poly2 = addprim(0,"polyline");
        int vert4 = addvertex(0,poly2,p2);
        int vert5 = addvertex(0,poly2,p0u);
        int vert6 = addvertex(0,poly2,p3);      
    }
    else if(symbol==">"){//->
        int p2 = addpoint(0,v2);
        int p3 = addpoint(0,v3);
        int pup = addpoint(0,vup);
        int pdown = addpoint(0,vdown);

        int pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");
                pass = setpointattrib(0, "Cd", pup, color, "set");
                pass = setpointattrib(0, "Cd", pdown, color, "set");

        int poly = addprim(0,"polyline");
        int vert1 = addvertex(0,poly,p2);
        int vert2 = addvertex(0,poly,p3);
        int vert3 = addvertex(0,poly,pup);
        int poly2 = addprim(0,"polyline");
        int vert5 = addvertex(0,poly2,p3);
        int vert6 = addvertex(0,poly2,pdown);  
    }

    if(decoration == 1){//underline
        int d = addprim(0,"polyline");
        int p0 = addpoint(0,u0);
        int p1 = addpoint(0,u1);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");

        int vert0 = addvertex(0,d,p0);
        int vert1 = addvertex(0,d,p1);
    }
    if(decoration == 2){//box
        int d = addprim(0,"polyline");
        int p0 = addpoint(0,b0);
        int p1 = addpoint(0,b1);
        int p2 = addpoint(0,b2);
        int p3 = addpoint(0,b3);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");
                pass = setpointattrib(0, "Cd", p3, color, "set");

        int vert0 = addvertex(0,d,p0);
        int vert1 = addvertex(0,d,p1);
        int vert2 = addvertex(0,d,p3);
        int vert3 = addvertex(0,d,p2);
        int vert4 = addvertex(0,d,p0);
    }
    if(decoration == 3){//hat
        int d = addprim(0,"polyline");
        int p0 = addpoint(0,h2);
        int p1 = addpoint(0,h2b);
        int p2 = addpoint(0,h3);

        int pass = setpointattrib(0, "Cd", p0, color, "set");
                pass = setpointattrib(0, "Cd", p1, color, "set");
                pass = setpointattrib(0, "Cd", p2, color, "set");

        int vert0 = addvertex(0,d,p0);
        int vert1 = addvertex(0,d,p1);
        int vert2 = addvertex(0,d,p2);
    }
}
void drawNumber(vector position;string inputSTRING;float scale;vector color){
        //string n = itoa(number);
        //printf("n:%s",number);
        for(int i = 0;i<len(inputSTRING);i++){
                string char = inputSTRING[i];
                vector positionVector = set(i*1.5*scale,0,0);
                drawSymbol(position+positionVector,char,0,scale,color);
        }
}
void drawLine(vector a; vector b; float scale; vector color){
    int poly = addprim(0,"polyline");
    int p0 = addpoint(0,a);
    int p1 = addpoint(0,b);
    int pass = setpointattrib(0, "Cd", p0, color, "set");
     pass = setpointattrib(0, "Cd", p1, color, "set");
    int v0 = addvertex(0,poly,p0);
    int v1 = addvertex(0,poly,p1);
    vector mid = (a+b)/2;
    float length = length(a-b);
    //draw tip
    int tip = addprim(0,"polyline");
    float dx = a[0]-b[0];
    float dy = a[2]-b[2];
    float angle = atan2(dx,dy);
    matrix3 m = ident();
    rotate ( m, angle+3.1415, { 0, 1, 0 } );
    vector arrowL={-1.5,0,-1.5}*scale;
    vector arrowR={1.5,0,-1.5}*scale;
    arrowL*=m;
    arrowR*=m;
    arrowL+=b;
    arrowR+=b;
    int p2 = addpoint(0,arrowL);
    int p3 = addpoint(0,arrowR);
    pass = setpointattrib(0, "Cd", p2, color, "set");
    pass = setpointattrib(0, "Cd", p3, color, "set");
    int v2 = addvertex(0,tip,p2);
    int v2b = addvertex(0,tip,p1);
    int v3 = addvertex(0,tip,p3);



    //vector pl = set(;
    //vector pr = sin()+b;
    //drawNumber(mid+{0,0,0}, "D "+sprintf("%g",length),scale/4,color);
}
void drawLine2(vector a; vector b;vector displacement; float l; float scale; vector color){
    vector a2 = lerp(a+displacement,b+displacement,l);
    vector b2 = lerp(b+displacement,a+displacement,l);
    drawLine(a2,b2,scale,color);
}
float toDEG(float radians){
    return(180*(radians/3.14159265));
}
float clampAngle(float inputAngle){
    float x = inputAngle/3.14159265;
    x=x%2;
    if(x>1){
        x=-1+(x%1);
    }
    if(x<-1){
        x=1+(x%1);
    }
    x = x*3.14159265;
    return x;
}
void drawAngle(vector position;float scale; float radians; vector color){
    //draw a circle with 10 points.
    int circle = addprim(0,"polyline");
    float total = 36;
    float pi = 3.141592;
    for(int points=0;points<total;points++){
        float fraction = points/total;
        int p = addpoint(0, set(position[0]+cos(fraction*2*pi)*scale ,position[1],position[2]+sin(fraction*2*pi)*scale));
        int pass = setpointattrib(0, "Cd", p, color/5, "set");
        addvertex(0, circle, p);
    }
    int p = addpoint(0, set(position[0]+1*scale ,position[1],position[2]+0*scale));
    int pass = setpointattrib(0, "Cd", p, color/5, "set");
    addvertex(0, circle, p);
    //draw angle
    int direction = addprim(0,"polyline");
    int p0 = addpoint(0,position);
    int p1 = addpoint(0,set(position[0]+cos(radians)*scale ,position[1],position[2]+sin(radians)*scale));
    pass = setpointattrib(0, "Cd", p0, color*2, "set");
    pass = setpointattrib(0, "Cd", p1, color*2, "set");

    addvertex(0,direction,p0);
    addvertex(0,direction,p1);

    int reference = addprim(0,"polyline");
    int p00 = addpoint(0, set(position[0]+(1*scale),position[1],position[2]+(0*scale)));
    int p01 = addpoint(0, set(position[0]+(1.2*scale),position[1],position[2]+(0*scale)));
    pass = setpointattrib(0, "Cd", p00, color, "set");
    pass = setpointattrib(0, "Cd", p01, color, "set");
    addvertex(0,reference,p00);
    addvertex(0,reference,p01);
}
// EXAMPLE USE: compareAnglesXZ(set(endA[0]-startA[0],0,endA[2]-startA[2]),set(endB[0]-startB[0],0,endB[2]-startB[2])
float compareAnglesXZ(vector v_A;vector v_B){ 
    //get input angles, find atan of both vectors.
    float dax,day,dbx,dby;
    dax = v_A[0];
    day = v_A[2];
    dbx = v_B[0];
    dby = v_B[2];
    float angleA = atan2(day,dax);
    float angleB = atan2(dby,dby);
    angleB = clampAngle(angleA-angleB);
    return angleB;
}

int dirtypoints[]; //points that are part of a flow already.
int mergepoints[]; //datastructure: [even(terminal),odd(merge)]
int zeropoints[];
for(int ns=0;ns<npoints(0);ns++){
    if(neighbourcount(0,ns)==1){
        push(zeropoints,ns);
    }
}

int frameNumber = chi("frame_number");
for(int zp=0;zp<len(zeropoints);zp++){
    if(zp>frameNumber){continue;}//select a single growth path.
    int visitedpoints[];
    int currentPoint = zeropoints[zp];
    int growLoop = 1;
    float previousAngle = 0;
    int count = 0;
    while(growLoop==1&&count<200){
        count++;
        //compare current point against all neighbors.
        if(neighbourcount(0,currentPoint)>4){growLoop=0;break;}//escape
        int I_neighbors[] = neighbours(0,currentPoint);

        //filter neighbors here.
        int I_neighbors2[];
        for(int nvetting=0;nvetting<len(I_neighbors);nvetting++){
            int pass=1;
            if(find(zeropoints,I_neighbors[nvetting])>=0){pass=0;}
            //if(find(visitedpoints,I_neighbors[nvetting])>=0){pass=0;}
            //if(find(dirtypoints,I_neighbors[nvetting])>=0){pass=0;}
            if(pass==1){push(I_neighbors2,I_neighbors[nvetting]);}
        }
        if(len(I_neighbors2)==0){break;}


        float F_angles[];
        float F_anglesD[];
        //calculate angle to each neighbor
        for(int neigh=0;neigh<len(I_neighbors2);neigh++){
            vector neighP = point(0,"P",I_neighbors2[neigh]);
            vector currentP = point(0,"P",currentPoint);
            float dx = neighP[0]-currentP[0];
            float dy = neighP[2]-currentP[2];
            float angle = atan2(dy,dx);
            float angleDelta = clampAngle(angle-previousAngle);
            push(F_angles,angle);
            push(F_anglesD,angleDelta);
            //drawAngle(vector position;float scale; float radians; vector color)
            vector newV = lerp(currentP,neighP,0.2);
            vector newV2 = lerp(currentP,neighP,0.3);
            //drawAngle(newV+  set(0.01,zp/-1000.0,0.00), 0.01, angle, hsvtorgb({0.3,1,1}));
            //drawAngle(newV2+ set(0.01,zp/-1000.0,0.00), 0.01, angleDelta, hsvtorgb({0.6,1,1}));
            //drawNumber(newV+ set(0.00,zp/-1000.0,0.00), sprintf("%g",angle/3.141592*180),0.001, hsvtorgb({0.3,1,1}));
            //drawNumber(newV2+set(0.00,zp/-1000.0,0.00), "D "+sprintf("%g",angleDelta/3.141592*180),0.001, hsvtorgb({0.6,1,1}));


        }
        //sort by minimum absolute value.
        int nangleSelect=0;
        for(int nangle=0;nangle<len(F_angles)-1;nangle++){
            float angA = abs(F_anglesD[nangle]);
            float angB = abs(F_anglesD[nangle+1]); 
            if(angA>angB){
                nangleSelect=nangle+1;
            }
        }
        //draw line to new point.
        if(find(dirtypoints,currentPoint)>=0){continue;}
        drawLine2(point(0,"P",I_neighbors2[nangleSelect]),point(0,"P",currentPoint),set(0,-0.1-count/100.0+zp/3000.0,0),0.9,0.01,hsvtorgb(zp/100.0,1,1));
        drawNumber(point(0,"P",currentPoint)+set(0,-0.1-count/100.0+zp/3000.0,0),itoa(zp)+"."+itoa(count),0.01,hsvtorgb(zp/100.0,1,2));
        //setup next loop.
        push(dirtypoints,currentPoint);
        push(visitedpoints,currentPoint);
        push(visitedpoints,I_neighbors2[nangleSelect]);

        previousAngle=F_angles[nangleSelect];
        currentPoint = I_neighbors2[nangleSelect];     
    }
}