//Line has 2 coodinate pairs. L1:x1x2y1y2 & L2:x3,x4,y3,y4
vector segsegXZ(float x1; float y1;float x2;float y2;float x3;float y3;float x4;float y4) {
  float a1, a2, b1, b2, c1, c2; // Coefficients of line eqns.
  float r1, r2, r3, r4;         // 'Sign' values
  float denom, offset;          // Intermediate values
  float x, y;                   // Intermediate return values

  // Compute a1, b1, c1, where line joining points 1 and 2
  // is "a1 x  +  b1 y  +  c1  =  0".
  a1 = y2 - y1;
  b1 = x1 - x2;
  c1 = x2 * y1 - x1 * y2;

  // Compute r3 and r4.
  r3 = a1 * x3 + b1 * y3 + c1;
  r4 = a1 * x4 + b1 * y4 + c1;

  // Check signs of r3 and r4.  If both point 3 and point 4 lie on
  // same side of line 1, the line segments do not intersect.
  if ( r3 != 0 && r4 != 0 && ((r3 >= 0 && r4 >= 0) || (r3 < 0 && r4 < 0))) {
    return({0,-1,0});// no intersection
  }


  // Compute a2, b2, c2
  a2 = y4 - y3;
  b2 = x3 - x4;
  c2 = x4 * y3 - x3 * y4;

  // Compute r1 and r2
  r1 = a2 * x1 + b2 * y1 + c2;
  r2 = a2 * x2 + b2 * y2 + c2;

  // Check signs of r1 and r2.  If both point 1 and point 2 lie
  // on same side of second line segment, the line segments do
  // not intersect.
  if (r1 != 0 && r2 != 0 && ((r1 >= 0 && r2 >= 0) || (r1 < 0 && r2 < 0))) {
    return({0,-1,0});// no intersection
  }

  // Line segments intersect: compute intersection point.
  denom = a1 * b2 - a2 * b1;

  if ( denom == 0 ) {
    return({0,-2,0});//true.
  }

  offset = denom < 0 ? - denom / 2 : denom / 2;

  x = b1 * c2 - b2 * c1;
  y = a2 * c1 - a1 * c2;

  float retx=( x < 0 ? x : x ) / denom;
  float rety=( y < 0 ? y : y ) / denom;
  return(set(retx,0,rety));
}
void drawAngle(vector position;float scale; float radians; vector color){
  //draw a circle with 10 points.
  float pi = 3.141592;
  int circle = addprim(0,"polyline");
  float total = 36;
  for(int points=0;points<total;points++){
        float fraction = points/total;
        int p = addpoint(0, set(position[0]+cos(fraction*2*pi)*scale ,position[1],position[2]+sin(fraction*2*pi)*scale));
        int pass = setpointattrib(0, "Cd", p, color/5, "set");
        addvertex(0, circle, p);
  }
  int p = addpoint(0, set(position[0]+1*scale ,position[1],position[2]+0*scale));
  int pass = setpointattrib(0, "Cd", p, color/5, "set");
  addvertex(0, circle, p);
  //draw angle
  int direction = addprim(0,"polyline");
  int p0 = addpoint(0,position);
  int p1 = addpoint(0,set(position[0]+cos(radians)*scale ,position[1],position[2]+sin(radians)*scale));
  pass = setpointattrib(0, "Cd", p0, color*2, "set");
  pass = setpointattrib(0, "Cd", p1, color*2, "set");

  addvertex(0,direction,p0);
  addvertex(0,direction,p1);

  int reference = addprim(0,"polyline");
  int p00 = addpoint(0, set(position[0]+(1*scale),position[1],position[2]+(0*scale)));
  int p01 = addpoint(0, set(position[0]+(1.2*scale),position[1],position[2]+(0*scale)));
  pass = setpointattrib(0, "Cd", p00, color, "set");
  pass = setpointattrib(0, "Cd", p01, color, "set");
  addvertex(0,reference,p00);
  addvertex(0,reference,p01);
}
//initial test:
//vector intersection = segsegXZ(0.0,0.0,5.0,5.0,0.0,5.0,5.0,0.0);
//drawAngle(intersection, 1.0,0.0,{1.0,0,1.0});


float pi2 = 3.141592;
int np0 = nprimitives(1);
int np1 = nprimitives(2);

//printf("np0:%f,np1:%f\\n",np0,np1);
for(int ip0=0; ip0<np0;ip0++){    //ip0;each primitive in geo0
  int primpoints0[] = primpoints(1,ip0);
  int close0 =  primintrinsic(1, "closed", ip0);
  //printf("primpoints0[]:%f\\n",primpoints0);

  int    npIndex[];   //stores new point index to insert.
  int    npLake[];    //stores lake integer
  vector npLocation[];// store intersection location


  for(int ip1=0;ip1<np1;ip1++){   //ip1;each primitive in geo1
    int primpoints1[] = primpoints(2,ip1);
    int close1 =  primintrinsic(2, "closed", ip1);
    //each edge in one (cpnt, npnt)0 vs (cpnt, npnt)1
    for(int edgebuilder = len(primpoints0)-1; edgebuilder>-close0;edgebuilder--){
      vector position1 = point(1,"P",primpoints0[edgebuilder]);
      vector position2 = point(1,"P",primpoints0[ edgebuilder-1 ]);

      for(int dividerEdge = len(primpoints1)-1; dividerEdge>-close1;dividerEdge--){
        vector position3 = point(2,"P",primpoints1[dividerEdge]); 
        vector position4 = point(2,"P",primpoints1[ dividerEdge-1 ]);

        vector collision = segsegXZ(position1[0],position1[2],position2[0],position2[2],position3[0],position3[2],position4[0],position4[2]);
        if(collision[1]>-1.0){
          //drawAngle(collision, 0.1,0.0,hsvtorgb(0.2,1,5));
          int npidx = find(primpoints0, primpoints0[edgebuilder]); 
          push(npIndex,npidx);
          push(npLake,ip1);
          push(npLocation,collision);
          /*
          float res = 8;
          for(float points=0;points<res;points++){ //create circle segments, and test against those.
            //printf("points:%f\\n",points);
            float fraction = points/res;
            float fraction2 = (points+1)/res;
            float f_scale = 0.3;
            vector circle_pointA = set(
              collision[0]+cos(fraction*2.0*pi2)*f_scale,
              0,
              collision[2]+sin(fraction*2.0*pi2)*f_scale);
            vector circle_pointB = set(
              collision[0]+cos(fraction2*2.0*pi2)*f_scale,
              0,
              collision[2]+sin(fraction2*2.0*pi2)*f_scale);

            //drawAngle(circle_pointA, 0.01,0.0,hsvtorgb(0.00,1,0.2));
            //drawAngle(circle_pointB, 0.01,0.0,hsvtorgb(0.00,1,0.2));
            //for current lake go through all points... again.
            for(int secondaryCollisions = len(primpoints1)-1; secondaryCollisions>=0-close1; secondaryCollisions--){
              vector position3b = point(1,"P",primpoints1[secondaryCollisions]);
              vector position4b = point(1,"P",primpoints1[secondaryCollisions-1]);
              vector collision2 = segsegXZ(circle_pointA[0],circle_pointA[2],circle_pointB[0],circle_pointB[2],position3b[0],position3b[2],position4b[0],position4b[2]);
              if(collision2[1]>-1.0){
                drawAngle(collision2, 0.02,0.0,hsvtorgb(0.05,1,2));
              }
            }
          }
          */
        }
      }
    }
  }
  //printf("npindex: %f, nplake: %f, nplocation: %f\\n",npIndex,npLake,npLocation);
  //build new geo.
  int pass;
  int newgeo;
  if(close0==1){ newgeo=addprim(0,"poly");/*push(primpoints0,primpoints0[0]);*/}else{newgeo=addprim(0,"polyline");}
  foreach(int primpoint0iterator; int pnt; primpoints0){ //rebuilding the primitive.
    int nextpnt = primpoints0[primpoint0iterator+1];
    vector loc = point(1,"P",pnt);
    vector loc2 = point(1,"P",nextpnt);
    float od= distance(loc,loc2);

    int newPoint = addpoint(0,loc);
    pass = setpointattrib(0, "Cd", newPoint, hsvtorgb(0.5,1,0.1), "set");
    pass = setpointattrib(0, "lake", newPoint, itoa(-1), "set");
    int newVertex = addvertex(0,newgeo,newPoint);

    int foundIndex[] = find(npIndex, (primpoint0iterator+1)%len(primpoints0)); //if npIndex has the current edge in storage.
    if(len(foundIndex)!=0){
      float foundD[];//convert point to u coordinate
      foreach(int dsearch;foundIndex){
        push(foundD,distance(loc,npLocation[dsearch]));
      }
      int dorder[] = argsort(foundD);
      int foundIndex_sorted[] = reorder(foundIndex,dorder);
      foreach(int fi; foundIndex_sorted){
        if(fi==-1){break;}else{        
          //insert intersection point.
          int intersectionPoint = addpoint(0,npLocation[fi]);
          pass = setpointattrib(0, "Cd", intersectionPoint, hsvtorgb(0.3,1,5), "set");
          pass = setpointattrib(0, "lake", intersectionPoint, itoa(npLake[fi]), "set");
          newVertex = addvertex(0,newgeo,intersectionPoint);
        }
      }
    }
  }
}



