int grid[] = {0,8,6,0,7,1,0,0,2,
              0,0,0,0,0,4,0,0,8,
              0,2,0,0,0,8,7,6,4,
              3,0,0,6,0,7,0,2,1,
              9,0,0,0,0,0,0,7,0,
              7,6,0,0,0,0,0,8,0,
              0,1,3,0,0,0,0,5,0,
              2,7,0,3,0,6,0,4,0,
              0,0,4,0,0,0,3,1,6,};
int emptymatrix[] = {0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0};
//row possibility
int rp[]= {0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0};
//column possibility
int cp[]= {0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0};
//cell possibility
int lp[]= {0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0,
           0,0,0,0,0,0,0,0,0};
int reduce[] = {};
//int total = len(grid);
//printf("grid: %f, %f",grid,total);
//for each iteration, create snapshot geometry
void drawGridProgress(int g[];float z){
    for(int i=0;i<len(g);i++){
     if(g[i]!=0){
      float x = i%9;
      float y = int(i/9);
      int np = addpoint(0,set(x,z,y));
      setpointattrib(0,"Cd",np,set(0,1,0),"set");
      setpointattrib(0,"Value",np,int(g[i]),"set");
     }
    }
}
void populatePossibility_row(int g[];int out[]){
    for(int x=0;x<9;x++){
        for(int y=1;y<10;y++){
           int pass = find(g, y, x*9, x*9+9);
           if(pass<0){ //if not found
            //printf("%f",y);
            out[(x*9)+y-1]=1;
           }
        }
    }
    //printf("%f \n----\n", out);
}
void drawPossibility_row(float z; int g[]){
    for(int i=0;i<len(g);i++){
      vector xp = (i%9.0)/9;
      vector yp = i/9;
      vector x2 = -1.5;
      vector y2 = 0;
      if(g[i]==1){
          int np = addpoint(0,set(xp+x2,z,yp+y2));
          setpointattrib(0,"Cd",np,set(1.0,1.0,0),"set");
          setpointattrib(0,"Value",np,int(g[i]),"set");
      }
      else{
          int np = addpoint(0,set(xp+x2,0,yp+y2));
          setpointattrib(0,"Cd",np,set(0.01,0.01,0),"set");
          setpointattrib(0,"Value",np,int(g[i]),"set");
      }

    }

}
void populatePossibility_col(int g[];int out[]){
    for(int x=0;x<9;x++){
        //create column array
        int col[];
        for(int c=0;c<9;c++){
            push(col, g[(c*9)+x]);
        }
        for(int y=1;y<10;y++){
           int pass = find(col, y);
           if(pass<0){ //if not found
            //printf("%f",y);
            out[(x*9)+y-1]=1;
           }
        }
    }
    //printf("%f \n----\n", out);
}
void drawPossibility_col(float z;int g[]){
    for(int i=0;i<len(g);i++){
      vector xp = i/9;
      vector yp = (i%9.0)/9;
      vector x2 = 0;
      vector y2 = -1.5;
      if(g[i]==1){
          int np = addpoint(0,set(xp+x2,z,yp+y2));
          setpointattrib(0,"Cd",np,set(0,01,1),"set");
          setpointattrib(0,"Value",np,int(g[i]),"set");
      }
      else{
          int np = addpoint(0,set(xp+x2,0,yp+y2));
          setpointattrib(0,"Cd",np,set(0,0.01,0.01),"set");
          setpointattrib(0,"Value",np,int(g[i]),"set");
      }

    }
}
void populatePossibility_cell(int g[];int out[]){
    int array[] = {};
    for(int c=0;c<3;c++){ //3 vertical columns
        for(int r=0;r<3;r++){// 3 horizontal rows
            //create cell array
            int cell[] = {};
            for(int v=0;v<3;v++){
                for(int h=0;h<3;h++){
                    push(cell, g[ h + (v*9) + (c*27) + (r*3) ]);
                    //printf("%f",g[ h + (v*9) + (c*27) + (r*3) ]);
                }
            }
            //after our [9] array is created, check for each number.
            //printf("cell: %f\n",cell);
            for(int y=1;y<10;y++){
                //printf("%f",cell);
                int pass = find(cell, y);
                if(pass<0){ //if not found
                    push(array,1);
                    //out[y-1  +(c*9)+(r*27)]=1;
                }
                else{
                    push(array,0);
                }
            }
        }
    }
    out= array;
//printf("out:\n%f\n+++\n", out);
}
void populatePossibility_item(float z; int g[];int row[]; int col[]; int cell[]; int out[]){
    int totals[] = {};
    //now we calculate a 81*9 matrix, by scanning and reducing all possibility matricies.
    for(int i=0; i < len(g);i++){//for each item
       if(g[i]==0){ //only process the cells that need it
           int only = 0;
           int total = 0;

           int rowid = i/9;
           int colid = i%9;
           int cellid = i/27*3 + i/3 -3*(i/9);
           //AND sets
           for(int n =0; n<9; n++){
              int result = row[rowid*9+n]*col[colid*9+n]*cell[cellid*9+n];

             int drawpoints = 0;
             if(drawpoints==1){
                 //ADD POINTs
                  int np2 = addpoint(0,set(colid+ (n%3/20.0), z, rowid + (n/3)/20.0));
                  int r = result*(n+1);
                  if(result>0){
                    setpointattrib(0,"Cd",np2,set(1.0,1,0),"set");
                    only = n+1;
                  }
                  else{
                    setpointattrib(0,"Cd",np2,set(1.0,0,0),"set");
                  }
              }else{
                  if(result>0){
                    only = n+1;
                  }
                  total+= result;
              }
           } //FOR EACH ITEM, CHECK EACH SET

           if(total==1){ //only if one possibility, update original grid.
               g[i] = only;
           }
        }
        /*else{
            for(int n =0; n<9; n++){
                push(out, int(9));
                total=0;
            }
        }   */
        //push(totals,total);
    }
        for(int item=0; item<81;item++){
         int array[]={};
            for(int read=0; read<9;read++){
                push(array,out[read+item*9]);
            }
            //printf("%f, t:%f, %f\n",item,totals[item],array);
        }
        //printf("totals: \n%f\n*-*-*-\n",totals);
}

//draw initial state.
drawGridProgress(grid,0);

for(int iteration =0;iteration<20;iteration++){
    populatePossibility_row(grid,rp);
    populatePossibility_col(grid,cp);
    populatePossibility_cell(grid,lp);
    //drawPossibility_row(iteration, rp);
    //drawPossibility_col(iteration, cp);
    populatePossibility_item(iteration,grid,rp,cp,lp,reduce);

    drawGridProgress(grid,iteration);
    }
//printf("grid: \n%f\n",grid);


//printf("rp: \n%f\n",rp);
//printf("cp: \n%f\n",cp);
//printf("lp: \n%f\n",lp);


//sets and deduction ----------------
//set 1,2,3 for each item we create list of row, column, and cell possibilities.
//analyze sets and remove duplicates
//find all currently empty cells that have 1 possibility
//fill
//repeat solve

//for each iteration, create snapshot geometry
