int grid[] = {0,8,6,0,7,1,0,0,2,
              0,0,0,0,0,4,0,0,8,
              0,2,0,0,0,8,7,6,4,
              3,0,0,6,0,7,0,2,1,
              9,0,0,0,0,0,0,7,0,
              7,6,0,0,0,0,0,8,0,
              0,1,3,0,0,0,0,5,0,
              2,7,0,3,0,6,0,4,0,
              0,0,4,0,0,0,3,1,6,};


int rp[]= {0,0,0,0,0,0,0,0,0}; //row possibility   (final size 9x9x9)
int cp[]= {0,0,0,0,0,0,0,0,0}; //column possibility
int lp[]= {0,0,0,0,0,0,0,0,0}; //cell possibility

int total = len(grid);
//printf("grid: %f, %f",grid,total);

//for each iteration, create snapshot geometry
void drawGridProgress(int g[];float z){
    for(int i=0;i<len(g);i++){
     if(g[i]!=0){
      float x = i%9;
      float y = int(i/9);
      int np = addpoint(0,set(x,0,y));
      setpointattrib(0,"Cd",np,set(0,1,0),"set");
      setpointattrib(0,"Value",np,int(g[i]),"set");
     }
    }
}



void populatePossibility_row(int g[];int out[]){ //outputs an array of 9 numbers.
    for(int x=0;x<9;x++){ //each address has 9 possible values use bit storage per item.
        int sum = 0;
        for(int y=1;y<10;y++){
           int pass = find(g, y, x*9, x*9+9);
           if(pass<0){ //if not found
            printf("%f",y);
            sum += pow(y,2);
           }
        }
        out[x] = sum;;
        printf("-------\n");
    }
    printf("%f", out);
}

//draw initial state.
drawGridProgress(grid,0);
populatePossibility_row(grid,rp);

//sets and deduction ----------------
//set 1,2,3 for each item we create list of row, column, and cell possibilities.
//analyze sets and remove duplicates
//find all currently empty cells that have 1 possibility
//fill
//repeat solve

//for each iteration, create snapshot geometry
