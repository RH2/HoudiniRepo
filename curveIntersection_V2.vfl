//Line has 2 coodinate pairs. L1:x1x2y1y2 & L2:x3,x4,y3,y4
vector segsegXZ(float x1; float y1;float x2;float y2;float x3;float y3;float x4;float y4) {
  float a1, a2, b1, b2, c1, c2; // Coefficients of line eqns.
  float r1, r2, r3, r4;         // 'Sign' values
  float denom, offset;          // Intermediate values
  float x, y;                   // Intermediate return values

  // Compute a1, b1, c1, where line joining points 1 and 2
  // is "a1 x  +  b1 y  +  c1  =  0".
  a1 = y2 - y1;
  b1 = x1 - x2;
  c1 = x2 * y1 - x1 * y2;

  // Compute r3 and r4.
  r3 = a1 * x3 + b1 * y3 + c1;
  r4 = a1 * x4 + b1 * y4 + c1;

  // Check signs of r3 and r4.  If both point 3 and point 4 lie on
  // same side of line 1, the line segments do not intersect.
  if ( r3 != 0 && r4 != 0 && ((r3 >= 0 && r4 >= 0) || (r3 < 0 && r4 < 0))) {
    return({0,-1,0});// no intersection
  }


  // Compute a2, b2, c2
  a2 = y4 - y3;
  b2 = x3 - x4;
  c2 = x4 * y3 - x3 * y4;

  // Compute r1 and r2
  r1 = a2 * x1 + b2 * y1 + c2;
  r2 = a2 * x2 + b2 * y2 + c2;

  // Check signs of r1 and r2.  If both point 1 and point 2 lie
  // on same side of second line segment, the line segments do
  // not intersect.
  if (r1 != 0 && r2 != 0 && ((r1 >= 0 && r2 >= 0) || (r1 < 0 && r2 < 0))) {
    return({0,-1,0});// no intersection
  }

  // Line segments intersect: compute intersection point.
  denom = a1 * b2 - a2 * b1;

  if ( denom == 0 ) {
    return({0,-2,0});//true.
  }

  offset = denom < 0 ? - denom / 2 : denom / 2;

  x = b1 * c2 - b2 * c1;
  y = a2 * c1 - a1 * c2;

  float retx=( x < 0 ? x : x ) / denom;
  float rety=( y < 0 ? y : y ) / denom;
  return(set(retx,0,rety));
}
void drawAngle(vector position;float scale; float radians; vector color){
  //draw a circle with 10 points.
  float pi = 3.141592;
  int circle = addprim(0,"polyline");
  float total = 36;
  for(int points=0;points<total;points++){
        float fraction = points/total;
        int p = addpoint(0, set(position[0]+cos(fraction*2*pi)*scale ,position[1],position[2]+sin(fraction*2*pi)*scale));
        int pass = setpointattrib(0, "Cd", p, color/5, "set");
        addvertex(0, circle, p);
  }
  int p = addpoint(0, set(position[0]+1*scale ,position[1],position[2]+0*scale));
  int pass = setpointattrib(0, "Cd", p, color/5, "set");
  addvertex(0, circle, p);
  //draw angle
  int direction = addprim(0,"polyline");
  int p0 = addpoint(0,position);
  int p1 = addpoint(0,set(position[0]+cos(radians)*scale ,position[1],position[2]+sin(radians)*scale));
  pass = setpointattrib(0, "Cd", p0, color*2, "set");
  pass = setpointattrib(0, "Cd", p1, color*2, "set");

  addvertex(0,direction,p0);
  addvertex(0,direction,p1);

  int reference = addprim(0,"polyline");
  int p00 = addpoint(0, set(position[0]+(1*scale),position[1],position[2]+(0*scale)));
  int p01 = addpoint(0, set(position[0]+(1.2*scale),position[1],position[2]+(0*scale)));
  pass = setpointattrib(0, "Cd", p00, color, "set");
  pass = setpointattrib(0, "Cd", p01, color, "set");
  addvertex(0,reference,p00);
  addvertex(0,reference,p01);
}
float pi = 3.141592;
int np1 = nprimitives(1); //R -river
int np2 = nprimitives(2); //L -lake

int collisionPairID_River[];
int previousRiverPoint[];
//int lakeInstigator[]; //no need to track instigator, because we have the collisionID to match things up!
vector collisionRiverLocations[];

int collisionPairID_Lake[];
int previousLakePoint[];
//int riverInstigator[];
vector collisionLakeLocations[];

int pass;

//FIND INTERSECTIONS:
int collisionCount = 0;
for(int ip1=0; ip1<np1;ip1++){    //ip1;each primitive in geo0
  int primpoints1[] = primpoints(1,ip1);
  int close1 =  primintrinsic(1, "closed", ip1);

  for(int ip2=0;ip2<np2;ip2++){   //ip2;each primitive in geo1
    int primpoints2[] = primpoints(2,ip2);
    int close2 =  primintrinsic(2, "closed", ip2);
    //each edge in one (cpnt, npnt)0 vs (cpnt, npnt)1
    for(int edgebuilder = -close1 ; edgebuilder< len(primpoints1)-1; edgebuilder++){
      vector position1 = point(1,"P",primpoints1[edgebuilder]);
      vector position2 = point(1,"P",primpoints1[ edgebuilder+1 ]);

      for(int dividerEdge = -close2; dividerEdge< len(primpoints2)-1; dividerEdge++){
        vector position3 = point(2,"P",primpoints2[dividerEdge]); 
        vector position4 = point(2,"P",primpoints2[ dividerEdge+1 ]);

        vector collisionLoc = segsegXZ(position1[0],position1[2],position2[0],position2[2],position3[0],position3[2],position4[0],position4[2]);
        if(collisionLoc[1]>-1.0){//drawAngle(collisionLoc, 0.02,0.0,hsvtorgb(0.2,1,5));  //Checks to see if intersection is valid.
          collisionCount++;
          
          push(collisionPairID_River, collisionCount);
          push(previousRiverPoint, primpoints1[edgebuilder]);
          //push(lakeInstigator, );
          push(collisionRiverLocations,collisionLoc);
          
          push(collisionPairID_Lake, collisionCount);
          push(previousLakePoint, primpoints2[ dividerEdge ]);
          //push(riverInstigator, );
          push(collisionLakeLocations,collisionLoc);
        }
      }
    }
  }
}

//REBUILD RIVERS
for(int rivprim=0; rivprim<np1; rivprim++){
  int primReconstruct;
  int rivpnts[] = primpoints(1,rivprim);
  int rivclose =  primintrinsic(1, "closed", rivprim);
  if(rivclose==1){primReconstruct = addprim(0,"poly");}else{primReconstruct = addprim(0,"polyline");}
  pass = setprimattrib(0,"river", primReconstruct, 1, "set");
  for(int rivpnt= -rivclose; rivpnt<len(rivpnts);rivpnt++){
    int thisrivpnt = rivpnts[rivpnt];
    vector SegmentOrigin = point(1,"P",thisrivpnt); 
    int SegmentOriginPnt = addpoint(0,SegmentOrigin); 
    pass = setpointattrib(0, "Cd", SegmentOriginPnt, hsvtorgb(0.6,1.0,0.2), "set"); 
    int vtx = addvertex(0,primReconstruct,SegmentOriginPnt);

    int collisionsOnSegment[] = find(previousRiverPoint,thisrivpnt);
    if(len(collisionsOnSegment)>=1){
      float distArray[];
      foreach(int cross; collisionsOnSegment){ //collisionsOnSegment is a bunch of indices.
      push(distArray, distance(SegmentOrigin,collisionRiverLocations[cross]));
      }
      int distOrder[] = argsort(distArray);
      int collisionsOnSegment_Sorted[] = reorder(collisionsOnSegment, distOrder);
      foreach(int cross; collisionsOnSegment_Sorted){
        int addpnt = addpoint(0,collisionRiverLocations[cross]);
        pass = setpointattrib(0, "Cd", addpnt, hsvtorgb(0.0,1,5), "set");
        pass = setpointattrib(0, "id", addpnt, collisionPairID_River[cross], "set");
        int addvrt = addvertex(0,primReconstruct,addpnt);
      }
    }
  }
}

//REBUILD LAKES
for(int lakprim=0; lakprim<np2; lakprim++){
  int primReconstruct;
  int lakpnts[] = primpoints(2,lakprim);
  int lakclose =  primintrinsic(2, "closed", lakprim);
  if(lakclose==1){primReconstruct = addprim(0,"poly");}else{primReconstruct = addprim(0,"polyline");}
  pass = setprimattrib(0,"river", primReconstruct, 0, "set");
  for(int lakpnt= -lakclose; lakpnt<len(lakpnts);lakpnt++){
    int thislakpnt = lakpnts[lakpnt];
    vector SegmentOrigin = point(2,"P",thislakpnt);
    int SegmentOriginPnt = addpoint(0,SegmentOrigin); 
    pass = setpointattrib(0, "Cd", SegmentOriginPnt, hsvtorgb(0.8,1.0,0.2), "set"); 
    int vtx = addvertex(0,primReconstruct,SegmentOriginPnt);

    int collisionsOnSegment[] = find(previousLakePoint,thislakpnt);
    if(len(collisionsOnSegment)>=1){
      float distArray[];
      foreach(int cross; collisionsOnSegment){ //collisionsOnSegment is a bunch of indices.
      push(distArray, distance(SegmentOrigin,collisionLakeLocations[cross]));
      }
      int distOrder[] = argsort(distArray);
      int collisionsOnSegment_Sorted[] = reorder(collisionsOnSegment, distOrder);
      foreach(int cross; collisionsOnSegment_Sorted){
        int addpnt = addpoint(0,collisionLakeLocations[cross]);
        pass = setpointattrib(0, "Cd", addpnt, hsvtorgb(0.0,1,5), "set");
        pass = setpointattrib(0, "id", addpnt, collisionPairID_Lake[cross], "set");
        int addvrt = addvertex(0,primReconstruct,addpnt);
      }
    }
  }
}

